using genFGLM
P, (u,v,w,x) = PolynomialRing(GF(1119649), ["u", "v", "w", "x"]);

F = [-64*u^3*v^4*w^4*x+48*u^2*v^5*w^3*x^2+48*u^2*v^3*w^5*x^2-8*u*v^6*w^2*x^3-32*u*v^4*w^4*x^3-8*u*v^2*w^6*x^3+4*v^5*w^3*x^4+4*v^3*w^5*x^4+48*u^2*v^5*w^3*x+48*u^2*v^3*w^5*x+16*u*v^6*w^2*x^2-128*u*v^4*w^4*x^2+16*u*v^2*w^6*x^2+12*v^5*w^3*x^3+12*v^3*w^5*x^3+160*u^4*v^3*w^3-96*u^3*v^4*w^2*x-96*u^3*v^2*w^4*x-36*u^2*v^5*w*x^2+48*u^2*v^3*w^3*x^2-36*u^2*v*w^5*x^2-8*u*v^6*w^2*x+8*u*v^6*x^3+16*u*v^4*w^4*x+36*u*v^4*w^2*x^3-8*u*v^2*w^6*x+36*u*v^2*w^4*x^3+8*u*w^6*x^3-4*v^5*w*x^4-16*v^3*w^3*x^4-4*v*w^5*x^4-192*u^3*v^4*w^2-192*u^3*v^2*w^4-36*u^2*v^5*w*x+456*u^2*v^3*w^3*x-36*u^2*v*w^5*x-24*u*v^6*x^2-24*u*w^6*x^2-16*v^5*w^3*x-4*v^5*w*x^3-16*v^3*w^5*x-16*v^3*w^3*x^3-4*v*w^5*x^3+108*u^3*v^4*x-24*u^3*v^2*w^2*x+108*u^3*w^4*x+72*u^2*v^5*w+48*u^2*v^3*w^3-72*u^2*v^3*w*x^2+72*u^2*v*w^5-72*u^2*v*w^3*x^2+24*u*v^6*x-120*u*v^4*w^2*x-12*u*v^4*x^3-120*u*v^2*w^4*x+24*u*w^6*x-12*u*w^4*x^3-4*v^5*w*x^2+80*v^3*w^3*x^2+12*v^3*w*x^4-4*v*w^5*x^2+12*v*w^3*x^4-144*u^2*v^3*w*x-144*u^2*v*w^3*x-8*u*v^6+72*u*v^4*w^2+96*u*v^4*x^2+72*u*v^2*w^4-8*u*w^6+96*u*w^4*x^2+36*v^5*w*x-72*v^3*w^3*x-12*v^3*w*x^3+36*v*w^5*x-12*v*w^3*x^3+72*u^2*v*w*x^2-84*u*v^4*x+168*u*v^2*w^2*x-12*u*v^2*x^3-84*u*w^4*x-12*u*w^2*x^3-24*v^5*w-48*v^3*w^3-24*v^3*w*x^2-24*v*w^5-24*v*w^3*x^2-8*v*w*x^4-24*u*v^2*x^2-24*u*w^2*x^2+48*v^3*w*x+48*v*w^3*x+24*v*w*x^3+8*u*x^3-24*v*w*x^2, -64*u^4*v^3*w^4*x+80*u^3*v^4*w^3*x^2+48*u^3*v^2*w^5*x^2-24*u^2*v^5*w^2*x^3-64*u^2*v^3*w^4*x^3-8*u^2*v*w^6*x^3+20*u*v^4*w^3*x^4+12*u*v^2*w^5*x^4-4*v^3*w^4*x^5+80*u^3*v^4*w^3*x+48*u^3*v^2*w^5*x+48*u^2*v^5*w^2*x^2-256*u^2*v^3*w^4*x^2+16*u^2*v*w^6*x^2+60*u*v^4*w^3*x^3+36*u*v^2*w^5*x^3-24*v^5*w^2*x^4+16*v^3*w^4*x^4-8*v*w^6*x^4+96*u^5*v^2*w^3-96*u^4*v^3*w^2*x-48*u^4*v*w^4*x-60*u^3*v^4*w*x^2+48*u^3*v^2*w^3*x^2-12*u^3*w^5*x^2-24*u^2*v^5*w^2*x+24*u^2*v^5*x^3+32*u^2*v^3*w^4*x+72*u^2*v^3*w^2*x^3-8*u^2*v*w^6*x+36*u^2*v*w^4*x^3-20*u*v^4*w*x^4-48*u*v^2*w^3*x^4-4*u*w^5*x^4+72*v^5*w^2*x^3-96*v^3*w^4*x^3+8*v^3*w^2*x^5+24*v*w^6*x^3+4*v*w^4*x^5-192*u^4*v^3*w^2-96*u^4*v*w^4-60*u^3*v^4*w*x+456*u^3*v^2*w^3*x-12*u^3*w^5*x-72*u^2*v^5*x^2-80*u*v^4*w^3*x-20*u*v^4*w*x^3-48*u*v^2*w^5*x-48*u*v^2*w^3*x^3-4*u*w^5*x^3-72*v^5*w^2*x^2+24*v^5*x^4+160*v^3*w^4*x^2-24*v*w^6*x^2+108*u^4*v^3*x-12*u^4*v*w^2*x+120*u^3*v^4*w+48*u^3*v^2*w^3-72*u^3*v^2*w*x^2+24*u^3*w^5-24*u^3*w^3*x^2+72*u^2*v^5*x-240*u^2*v^3*w^2*x-24*u^2*v^3*x^3-120*u^2*v*w^4*x-20*u*v^4*w*x^2+240*u*v^2*w^3*x^2+36*u*v^2*w*x^4-4*u*w^5*x^2+12*u*w^3*x^4+24*v^5*w^2*x-96*v^5*x^3+32*v^3*w^4*x+24*v^3*w^2*x^3-4*v^3*x^5+8*v*w^6*x+12*v*w^4*x^3-8*v*w^2*x^5-144*u^3*v^2*w*x-48*u^3*w^3*x-24*u^2*v^5+144*u^2*v^3*w^2+192*u^2*v^3*x^2+72*u^2*v*w^4+180*u*v^4*w*x-216*u*v^2*w^3*x-36*u*v^2*w*x^3+36*u*w^5*x-12*u*w^3*x^3+144*v^5*x^2-176*v^3*w^2*x^2-16*v^3*x^4-88*v*w^4*x^2+16*v*w^2*x^4+24*u^3*w*x^2-168*u^2*v^3*x+168*u^2*v*w^2*x-12*u^2*v*x^3-120*u*v^4*w-144*u*v^2*w^3-72*u*v^2*w*x^2-24*u*w^5-24*u*w^3*x^2-8*u*w*x^4-96*v^5*x+96*v^3*w^2*x+104*v^3*x^3+48*v*w^4*x-32*v*w^2*x^3+4*v*x^5-24*u^2*v*x^2+144*u*v^2*w*x+48*u*w^3*x+24*u*w*x^3+24*v^5+48*v^3*w^2-144*v^3*x^2+24*v*w^4+144*v*w^2*x^2-8*v*x^4-24*u*w*x^2+60*v^3*x-156*v*w^2*x-12*v*x^3+24*v*x^2, -64*u^4*v^4*w^3*x+48*u^3*v^5*w^2*x^2+80*u^3*v^3*w^4*x^2-8*u^2*v^6*w*x^3-64*u^2*v^4*w^3*x^3-24*u^2*v^2*w^5*x^3+12*u*v^5*w^2*x^4+20*u*v^3*w^4*x^4-4*v^4*w^3*x^5+48*u^3*v^5*w^2*x+80*u^3*v^3*w^4*x+16*u^2*v^6*w*x^2-256*u^2*v^4*w^3*x^2+48*u^2*v^2*w^5*x^2+36*u*v^5*w^2*x^3+60*u*v^3*w^4*x^3-8*v^6*w*x^4+16*v^4*w^3*x^4-24*v^2*w^5*x^4+96*u^5*v^3*w^2-48*u^4*v^4*w*x-96*u^4*v^2*w^3*x-12*u^3*v^5*x^2+48*u^3*v^3*w^2*x^2-60*u^3*v*w^4*x^2-8*u^2*v^6*w*x+32*u^2*v^4*w^3*x+36*u^2*v^4*w*x^3-24*u^2*v^2*w^5*x+72*u^2*v^2*w^3*x^3+24*u^2*w^5*x^3-4*u*v^5*x^4-48*u*v^3*w^2*x^4-20*u*v*w^4*x^4+24*v^6*w*x^3-96*v^4*w^3*x^3+4*v^4*w*x^5+72*v^2*w^5*x^3+8*v^2*w^3*x^5-96*u^4*v^4*w-192*u^4*v^2*w^3-12*u^3*v^5*x+456*u^3*v^3*w^2*x-60*u^3*v*w^4*x-72*u^2*w^5*x^2-48*u*v^5*w^2*x-4*u*v^5*x^3-80*u*v^3*w^4*x-48*u*v^3*w^2*x^3-20*u*v*w^4*x^3-24*v^6*w*x^2+160*v^4*w^3*x^2-72*v^2*w^5*x^2+24*w^5*x^4-12*u^4*v^2*w*x+108*u^4*w^3*x+24*u^3*v^5+48*u^3*v^3*w^2-24*u^3*v^3*x^2+120*u^3*v*w^4-72*u^3*v*w^2*x^2-120*u^2*v^4*w*x-240*u^2*v^2*w^3*x+72*u^2*w^5*x-24*u^2*w^3*x^3-4*u*v^5*x^2+240*u*v^3*w^2*x^2+12*u*v^3*x^4-20*u*v*w^4*x^2+36*u*v*w^2*x^4+8*v^6*w*x+32*v^4*w^3*x+12*v^4*w*x^3+24*v^2*w^5*x+24*v^2*w^3*x^3-8*v^2*w*x^5-96*w^5*x^3-4*w^3*x^5-48*u^3*v^3*x-144*u^3*v*w^2*x+72*u^2*v^4*w+144*u^2*v^2*w^3-24*u^2*w^5+192*u^2*w^3*x^2+36*u*v^5*x-216*u*v^3*w^2*x-12*u*v^3*x^3+180*u*v*w^4*x-36*u*v*w^2*x^3-88*v^4*w*x^2-176*v^2*w^3*x^2+16*v^2*w*x^4+144*w^5*x^2-16*w^3*x^4+24*u^3*v*x^2+168*u^2*v^2*w*x-168*u^2*w^3*x-12*u^2*w*x^3-24*u*v^5-144*u*v^3*w^2-24*u*v^3*x^2-120*u*v*w^4-72*u*v*w^2*x^2-8*u*v*x^4+48*v^4*w*x+96*v^2*w^3*x-32*v^2*w*x^3-96*w^5*x+104*w^3*x^3+4*w*x^5-24*u^2*w*x^2+48*u*v^3*x+144*u*v*w^2*x+24*u*v*x^3+24*v^4*w+48*v^2*w^3+144*v^2*w*x^2+24*w^5-144*w^3*x^2-8*w*x^4-24*u*v*x^2-156*v^2*w*x+60*w^3*x-12*w*x^3+24*w*x^2, -16*u^4*v^4*w^4+32*u^3*v^5*w^3*x+32*u^3*v^3*w^5*x-12*u^2*v^6*w^2*x^2-48*u^2*v^4*w^4*x^2-12*u^2*v^2*w^6*x^2+16*u*v^5*w^3*x^3+16*u*v^3*w^5*x^3-5*v^4*w^4*x^4+16*u^3*v^5*w^3+16*u^3*v^3*w^5+16*u^2*v^6*w^2*x-128*u^2*v^4*w^4*x+16*u^2*v^2*w^6*x+36*u*v^5*w^3*x^2+36*u*v^3*w^5*x^2-16*v^6*w^2*x^3+16*v^4*w^4*x^3-16*v^2*w^6*x^3-24*u^4*v^4*w^2-24*u^4*v^2*w^4-24*u^3*v^5*w*x+32*u^3*v^3*w^3*x-24*u^3*v*w^5*x-4*u^2*v^6*w^2+12*u^2*v^6*x^2+8*u^2*v^4*w^4+54*u^2*v^4*w^2*x^2-4*u^2*v^2*w^6+54*u^2*v^2*w^4*x^2+12*u^2*w^6*x^2-16*u*v^5*w*x^3-64*u*v^3*w^3*x^3-16*u*v*w^5*x^3+36*v^6*w^2*x^2-72*v^4*w^4*x^2+10*v^4*w^2*x^4+36*v^2*w^6*x^2+10*v^2*w^4*x^4-12*u^3*v^5*w+152*u^3*v^3*w^3-12*u^3*v*w^5-24*u^2*v^6*x-24*u^2*w^6*x-16*u*v^5*w^3-12*u*v^5*w*x^2-16*u*v^3*w^5-48*u*v^3*w^3*x^2-12*u*v*w^5*x^2-24*v^6*w^2*x+16*v^6*x^3+80*v^4*w^4*x-24*v^2*w^6*x+16*w^6*x^3+27*u^4*v^4-6*u^4*v^2*w^2+27*u^4*w^4-48*u^3*v^3*w*x-48*u^3*v*w^3*x+12*u^2*v^6-60*u^2*v^4*w^2-18*u^2*v^4*x^2-60*u^2*v^2*w^4+12*u^2*w^6-18*u^2*w^4*x^2-8*u*v^5*w*x+160*u*v^3*w^3*x+48*u*v^3*w*x^3-8*u*v*w^5*x+48*u*v*w^3*x^3+4*v^6*w^2-48*v^6*x^2+8*v^4*w^4+18*v^4*w^2*x^2-5*v^4*x^4+4*v^2*w^6+18*v^2*w^4*x^2-20*v^2*w^2*x^4-48*w^6*x^2-5*w^4*x^4-48*u^3*v^3*w-48*u^3*v*w^3+96*u^2*v^4*x+96*u^2*w^4*x+36*u*v^5*w-72*u*v^3*w^3-36*u*v^3*w*x^2+36*u*v*w^5-36*u*v*w^3*x^2+48*v^6*x-88*v^4*w^2*x-16*v^4*x^3-88*v^2*w^4*x+32*v^2*w^2*x^3+48*w^6*x-16*w^4*x^3+48*u^3*v*w*x-42*u^2*v^4+84*u^2*v^2*w^2-18*u^2*v^2*x^2-42*u^2*w^4-18*u^2*w^2*x^2-48*u*v^3*w*x-48*u*v*w^3*x-32*u*v*w*x^3-16*v^6+24*v^4*w^2+78*v^4*x^2+24*v^2*w^4-48*v^2*w^2*x^2+10*v^2*x^4-16*w^6+78*w^4*x^2+10*w^2*x^4-24*u^2*v^2*x-24*u^2*w^2*x+48*u*v^3*w+48*u*v*w^3+72*u*v*w*x^2-72*v^4*x+144*v^2*w^2*x-16*v^2*x^3-72*w^4*x-16*w^2*x^3+12*u^2*x^2-48*u*v*w*x+15*v^4-78*v^2*w^2-18*v^2*x^2+15*w^4-18*w^2*x^2-5*x^4+24*v^2*x+24*w^2*x+16*x^3-12*x^2];
sort!(F, by = p -> total_degree(p));
id = ideal(P,F);
gb = gen_fglm(id, target_order=:degrevlex);
display(gb)
exit()