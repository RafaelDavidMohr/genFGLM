using genFGLM

P, x = polynomial_ring(GF(65521), "x" => 1:6)
id = ideal(P, [9501*x[1]^6 + 41205*x[1]^4*x[2]^2 + 49212*x[1]^4*x[3]*x[4] + 37676*x[1]^2*x[2]^3*x[3] + 55942*x[1]*x[2]^3*x[3]*x[5] + 21384*x[1]*x[2]^2*x[6]^3 + 26194*x[1]*x[5]^4*x[6] + 55256*x[2]*x[3]^4*x[6] + 34311*x[3]^5*x[4] + 64656*x[4]^2*x[5]^2*x[6]^2, 36186*x[1]*x[3]^2*x[5]*x[6]^2 + 31615*x[1]*x[3]*x[4]^2*x[5]*x[6] + 35742*x[2]^5*x[3] + 41553*x[2]^4*x[3]*x[4] + 8417*x[2]^3*x[3]*x[4]*x[6] + 30053*x[2]^2*x[3]*x[4]*x[5]*x[6] + 4853*x[2]*x[5]^4*x[6] + 15919*x[3]^3*x[4]*x[5]^2 + 58137*x[5]^6 + 32862*x[5]^3*x[6]^3, 43599*x[1]^4*x[5] + 2128*x[1]*x[2]*x[4]^2*x[5]*x[6] + 30012*x[1]*x[4]*x[5]^3*x[6] + 45410*x[2]^3*x[6]^3 + 15986*x[3]^5*x[4] + 22693*x[3]^4*x[4]^2 + 2992*x[3]^3*x[4]^3 + 11463*x[4]^5*x[6] + 60300*x[4]^5])
vrs = gens(base_ring(id))
comp_id = ideal(base_ring(id), [vrs[1]*vrs[2], vrs[1]*vrs[3]])
gen_fglm(comp_id, target_order = :degrevlex)
tim = @elapsed gen_fglm(id, target_order = :degrevlex)
println("time $(tim)")
exit()
